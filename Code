#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

using namespace std;

// Function declarations
void homescreen_display(char &homeInput);
void help_screen_display(char homeInput, char &helpReturn);
vector<int> shuffle_deck();
vector<vector<int>> deal_cards(vector<int>& deck, int numPlayers, int cardsPerPlayer);
void play_game(vector<vector<int>>& playerHands);

int main() {
    char homeInput, helpReturn;

    homescreen_display(homeInput);

    vector<int> deck = shuffle_deck();
    int numPlayers = 4;
    int cardsPerPlayer = 6;
    vector<vector<int>> playerHands = deal_cards(deck, numPlayers, cardsPerPlayer);

    play_game(playerHands);

    return 0;
}

// Display home screen
void homescreen_display(char &homeInput) {
    cout << "╔═══════════════════════════════════════════════╗\n";
    cout << "║             ╔═══╦╗ ╔╦═══╦╗╔═╦═══╗             ║\n";
    cout << "║             ║╔═╗║║ ║║╔═╗║║║╔╣╔═╗║             ║\n";
    cout << "║             ║║ ╚╣║ ║║╚═╝║╚╝╝║║ ║║             ║\n";
    cout << "║             ║║╔═╣║ ║║╔╗╔╣╔╗║║╚═╝║             ║\n";
    cout << "║             ║╚╩═║╚═╝║║║╚╣║║╚╣╔═╗║             ║\n";
    cout << "║             ╚═══╩═══╩╝╚═╩╝╚═╩╝ ╚╝             ║\n";
    cout << "╚═══════════════════════════════════════════════╝\n";
    cout << "Swedish for 'Cucumber'\n\n";
    cout << "Press ENTER/RETURN to begin or ? to view the rules: ";
    cin >> homeInput;
}3


// Display help/rules screen
void help_screen_display(char homeInput, char &helpReturn) {
    cout << "╔════════════════════════════════════════════════════════════════╗\n";
    cout << "║                         Gurka Rules                            ║\n";
    cout << "╠════════════════════════════════════════════════════════════════╣\n";
    cout << "║ - Played with 3 to 7 players.                                  ║\n";
    cout << "║ - Each player is dealt 6 cards.                                ║\n";
    cout << "║ - First player starts, winner of each round begins the next.   ║\n";
    cout << "║ - Players must match or beat the highest card in the round.    ║\n";
    cout << "║ - If not possible, play the lowest card.                       ║\n";
    cout << "║ - Repeat until all players have 1 card.                        ║\n";
    cout << "║ - Player with lowest card at the end wins.                     ║\n";
    cout << "╚════════════════════════════════════════════════════════════════╝\n";
    cout << "Press any key to return to the main menu: ";
    cin >> helpReturn;
 
    if (homeInput == '/' || homeInput == '?') {
        help_screen_display(homeInput, helpReturn);
    }
    else if (homeInput == 'q' || homeInput == 'Q') {
        cout << "Exiting the game. Goodbye!\n";
        exit(0);
    } else {
        cout << "Invalid input. Please try again.\n";
        help_screen_display(homeInput, helpReturn);
    }

}

// Shuffle a standard 52-card deck
vector<int> shuffle_deck() {
    vector<int> deck;
    for (int i = 1 i <= 52 ++i) {
        deck.push_back(i);
    }
    random_device rd;
    mt19937 g(rd());
    shuffle(deck.begin(), deck.end(), g);
    return deck;
}

// Deal cards to players
vector<vector<int>> deal_cards(vector<int>& deck, int numPlayers, int cardsPerPlayer) {
    // handCount tracks how many cards each player has.
    // Default is 6.
    // handCount values should only decrease as the game goes on.
    int handCount1 = 6;   
    int handCount2 = 6;
    int handCount3 = 6;
    int handCount4 = 6;
    vector<vector<int>> playerHands(numPlayers);
    for (int i = 0 i < cardsPerPlayer ++i) {
        for (int j = 0 j < numPlayers ++j) {
            if (!deck.empty()) {
                playerHands[j].push_back(deck.back());
                deck.pop_back(); 
            }
        }
    
    return playerHands;
}

// Display players hands
void play_game(vector<vector<int>>& playerHands) {
    int numPlayers = playerHands.size();d << " ";
        }
        cout << endl;
    }

    cout << "\nGame logic not yet implemented.\n";\
    
