#include <iostream>
#include <algorithm>
#include <random>
#include <ctime>
#include <limits>
#include <windows.h>
#include <vector>
#include <string>

using namespace std;

// Global player hands
vector<string> p1Hand;
vector<string> p2Hand;
vector<string> p3Hand;

// Store last card played by each player
string p1LastCard, p2LastCard, p3LastCard;

// Scores (just placeholders for now)
int p1Score = 0, p2Score = 0, p3Score = 0;

// Function declarations
void game();
void displayRules();
void scoreboard();
void dealCards();
int getCardValue(const string& card);
string getSuit(const string& card);
int findLowestCardIndex(const vector<string>& hand);
int findMatchingOrHigherCardIndex(const vector<string>& hand, int minValue);
string playCardForAI(vector<string>& hand, int currentMax);
void playGame(); // replaces playRound, plays all 6 rounds
void drawCardBox(const string& card);

int main()
{
    SetConsoleOutputCP(CP_UTF8);
    game(); // Start the game
    return 0;
}

void game() {
    while (true) {
        char homeInput;

        cout << "╔═══════════════════════════════════════════════╗\n";
        cout << "║             ╔═══╦╗ ╔╦═══╦╗╔═╦═══╗             ║\n";
        cout << "║             ║╔═╗║║ ║║╔═╗║║║╔╣╔═╗║             ║\n";
        cout << "║             ║║ ╚╣║ ║║╚═╝║╚╝╝║║ ║║             ║\n";
        cout << "║             ║║╔═╣║ ║║╔╗╔╣╔╗║║╚═╝║             ║\n";
        cout << "║             ║╚╩═║╚═╝║║║╚╣║║╚╣╔═╗║             ║\n";
        cout << "║             ╚═══╩═══╩╝╚═╩╝╚═╩╝ ╚╝             ║\n";
        cout << "╚═══════════════════════════════════════════════╝\n";
        cout << "            Press 1 to start the game            \n";
        cout << "            Press 2 to view the rules            \n";
        cout << "            Press 3 to view the score            \n";
        cout << "            Press 0 to close the game            \n";
        cin >> homeInput;

        if (homeInput == '2') {
            system("cls");
            displayRules();
        }
        else if (homeInput == '1') {
            system("cls");
            dealCards();
            playGame(); // play the 6 rounds here
            break; // after game ends, exit to main menu
        }
        else if (homeInput == '3') {
            system("cls");
            scoreboard();
        }
        else if (homeInput == '0') {
            cout << "Exiting...\n";
            exit(0);
        }
        else {
            system("cls");
            cout << "Invalid input. Please try again.\n";
        }
    }
}

void displayRules() {
    char rulesInput;

    cout << "╔════════════════════════════════════════════════════════════════════════════════════════════════╗\n";
    cout << "║                                    The Rules of Gurka                                          ║\n";
    cout << "║                                                                                                ║\n";
    cout << "║Gurka is played by 3 players                                                                    ║\n";
    cout << "║Each player is dealt 6 cards                                                                    ║\n";
    cout << "║Player 1 goes first to start, and the winner of each trick (round) begins the next one          ║\n";
    cout << "║Play goes in numerical order (1, 2, 3)                                                         ║\n";
    cout << "║H, D, S, and C after a number represent card (E.X. 10S is the 10 of Spades)                     ║\n";
    cout << "║After the first card in each round, players must match or beat the value of the highest card    ║\n";
    cout << "║If this is not possible, your lowest value card must be played                                  ║\n";
    cout << "║Repeat this until all players have no cards left                                               ║\n";
    cout << "║The player with the highest card each round wins and starts the next round                     ║\n";
    cout << "║At the end, the player whose last played card is the lowest wins the game                      ║\n";
    cout << "╚════════════════════════════════════════════════════════════════════════════════════════════════╝\n";
    cout << "                             Press any key to return to the Main Menu                             \n";
    cout << "                                   Press '0' to exit the game                                  \n";
    cin >> rulesInput;

    if (rulesInput == '0') {
        cout << "Exiting...\n";
        exit(0);
    }
    else {
        system("cls");
    }
}

void scoreboard()
{
    char scoreInput;

    cout << "╔════════════════════════════════════════════════════════════════════════════════════════════════╗\n";
    cout << "║                                            Scoreboard                                          ║\n";
    cout << "║Every win each player gets will appear here.                                                    ║\n";
    cout << "║Resets when the game is closed.                                                                 ║\n";
    cout << "║Player 1's Score: " << p1Score << "                                                               ║\n";
    cout << "║Player 2's Score: " << p2Score << "                                                               ║\n";
    cout << "║Player 3's Score: " << p3Score << "                                                               ║\n";
    cout << "╚════════════════════════════════════════════════════════════════════════════════════════════════╝\n";
    cout << "                             Press any key to return to the Main Menu                             \n";
    cout << "                                   Press '0' to exit the game                                  \n";
    cin >> scoreInput;

    if (scoreInput == '0')
        exit(0);
    else
        system("cls");
}

// Deal 6 cards to each player randomly
void dealCards()
{
    vector<string> deck = {
        "2H", "3H", "4H", "5H", "6H", "7H", "8H", "9H", "10H", "JH", "QH", "KH", "AH",
        "2D", "3D", "4D", "5D", "6D", "7D", "8D", "9D", "10D", "JD", "QD", "KD", "AD",
        "2S", "3S", "4S", "5S", "6S", "7S", "8S", "9S", "10S", "JS", "QS", "KS", "AS",
        "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "10C", "JC", "QC", "KC", "AC"
    };

    random_device rd;
    mt19937 g(rd());
    shuffle(deck.begin(), deck.end(), g);

    p1Hand.clear();
    p2Hand.clear();
    p3Hand.clear();

    // Clear last cards
    p1LastCard = ""; p2LastCard = ""; p3LastCard = "";

    for (int i = 0; i < 6; ++i) {
        p1Hand.push_back(deck.back()); deck.pop_back();
        p2Hand.push_back(deck.back()); deck.pop_back();
        p3Hand.push_back(deck.back()); deck.pop_back();
    }

    cout << "Player 1's hand: ";
    for (size_t i = 0; i < p1Hand.size(); ++i)
        cout << "(" << (i + 1) << ") " << p1Hand[i] << " ";
    cout << "\n\n";

    cout << "(Other players' cards are hidden.)\n\n";
}

// Returns card value (2=2, ... 10=10, J=11, Q=12, K=13, A=14)
int getCardValue(const string& card)
{
    string rank;
    if (card.size() == 3) // e.g., "10H"
        rank = card.substr(0, 2);
    else
        rank = card.substr(0, 1);

    if (rank == "J") return 11;
    if (rank == "Q") return 12;
    if (rank == "K") return 13;
    if (rank == "A") return 14;

    return stoi(rank);
}

string getSuit(const string& card)
{
    return card.substr(card.size() - 1, 1);
}

// Find index of lowest card in hand
int findLowestCardIndex(const vector<string>& hand)
{
    int minIndex = 0;
    int minValue = getCardValue(hand[0]);

    for (int i = 1; i < (int)hand.size(); ++i) {
        int val = getCardValue(hand[i]);
        if (val < minValue) {
            minValue = val;
            minIndex = i;
        }
    }
    return minIndex;
}

// Find index of card >= minValue in hand; return -1 if none
int findMatchingOrHigherCardIndex(const vector<string>& hand, int minValue)
{
    int chosenIndex = -1;
    int chosenValue = 1000; // large dummy

    for (int i = 0; i < (int)hand.size(); ++i) {
        int val = getCardValue(hand[i]);
        if (val >= minValue && val < chosenValue) {
            chosenValue = val;
            chosenIndex = i;
        }
    }
    return chosenIndex;
}

// AI plays a card - picks lowest card >= currentMax or lowest card otherwise
string playCardForAI(vector<string>& hand, int currentMax)
{
    int idx = findMatchingOrHigherCardIndex(hand, currentMax);
    if (idx == -1)
        idx = findLowestCardIndex(hand);

    string chosenCard = hand[idx];
    hand.erase(hand.begin() + idx);
    return chosenCard;
}

// Draw card box for visual display
void drawCardBox(const string& card)
{
    if (card.empty()) {
        cout << "[No card]\n";
        return;
    }
    cout << "╔═════╗\n";
    cout << "║" << (card.size() == 3 ? card.substr(0, 2) : card.substr(0, 1));
    if (card.size() == 2) cout << " ";
    cout << "  ║\n";

    string suit = getSuit(card);
    if (suit == "H") cout << "║ ♥   ║\n";
    else if (suit == "D") cout << "║ ♦   ║\n";
    else if (suit == "S") cout << "║ ♠   ║\n";
    else if (suit == "C") cout << "║ ♣   ║\n";
    else cout << "║     ║\n";

    cout << "║  " << (card.size() == 3 ? card.substr(0, 2) : card.substr(0, 1)) << "║\n";
    cout << "╚═════╝\n";
}

// The main game loop: 6 rounds
void playGame()
{
    int startingPlayer = 1; // player 1 starts the first round

    for (int round = 1; round <= 6; ++round) {
        cout << "===== Round " << round << " =====\n";

        vector<pair<int, string>> cardsPlayed; // (playerNumber, cardPlayed)
        int currentMaxValue = -1;
        int roundWinner = -1;

        // Determine player order for this round
        int order[3] = { startingPlayer, (startingPlayer % 3) + 1, ((startingPlayer + 1) % 3) + 1 };

        for (int i = 0; i < 3; ++i) {
            int player = order[i];
            string card;

            if (player == 1) {
                // Player 1's turn: show hand and prompt choice
                cout << "Player 1, your hand:\n";
                for (size_t j = 0; j < p1Hand.size(); ++j) {
                    cout << (j + 1) << ": " << p1Hand[j] << "\n";
                }

                int choice;
                while (true) {
                    cout << "Choose a card to play by number: ";
                    cin >> choice;

                    if (choice < 1 || choice >(int)p1Hand.size()) {
                        cout << "Invalid choice, try again.\n";
                        continue;
                    }

                    int val = getCardValue(p1Hand[choice - 1]);
                    if (currentMaxValue != -1 && val < currentMaxValue) {
                        // If must match or beat the highest card played so far, reject if lower
                        cout << "You must play a card equal or higher than " << currentMaxValue << ". Try again.\n";
                        continue;
                    }

                    card = p1Hand[choice - 1];
                    p1Hand.erase(p1Hand.begin() + choice - 1);
                    p1LastCard = card;
                    break;
                }
            }
            else if (player == 2) {
                card = playCardForAI(p2Hand, currentMaxValue);
                p2LastCard = card;
                cout << "Player 2 played: " << card << "\n";
            }
            else if (player == 3) {
                card = playCardForAI(p3Hand, currentMaxValue);
                p3LastCard = card;
                cout << "Player 3 played: " << card << "\n";
            }

            int cardValue = getCardValue(card);
            cardsPlayed.push_back({ player, card });

            if (cardValue > currentMaxValue) {
                currentMaxValue = cardValue;
                roundWinner = player;
            }

            drawCardBox(card);
        }

        cout << "Player " << roundWinner << " wins round " << round << "!\n\n";

        // Next round starts with roundWinner
        startingPlayer = roundWinner;
    }

    // After all rounds, determine the game winner by lowest last card
    int val1 = getCardValue(p1LastCard);
    int val2 = getCardValue(p2LastCard);
    int val3 = getCardValue(p3LastCard);

    int minVal = min({ val1, val2, val3 });

    cout << "===== Game Over =====\n";
    cout << "Player 1's last card: " << p1LastCard << "\n";
    cout << "Player 2's last card: " << p2LastCard << "\n";
    cout << "Player 3's last card: " << p3LastCard << "\n";

    if (minVal == val1) {
        cout << "Player 1 wins the game with the lowest last card!\n";
        p1Score++;
    }
    else if (minVal == val2) {
        cout << "Player 2 wins the game with the lowest last card!\n";
        p2Score++;
    }
    else {
        cout << "Player 3 wins the game with the lowest last card!\n";
        p3Score++;
    }

    cout << "\nPress any key to return to main menu...\n";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cin.get();
    system("cls");
}
